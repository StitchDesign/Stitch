//
//  PatchEvaluateExtensions.swift
//  Stitch
//
//  Created by Christian J Clampitt on 7/12/22.
//

import Foundation
import SwiftUI
import StitchSchemaKit

extension Patch {
    @MainActor
    var evaluate: PureEvals? {
        switch self {
        case
            // wireless nodes are just splitter nodes with covered up edges and invisible edges
            .wirelessReceiver, .wirelessBroadcaster:
            return .node(outputsOnlyEval(identityEvaluation))
        case .splitter:
            // .impure(.impure because of pulse nodeType)
            return .graphStep(splitterEval)
        case .imageImport:
            return .node(imageImportEval)
        case .add:
            return .node(arithmeticNodeTypeEval(addEval))
        case .convertPosition:
            return .graph(outputsOnlyGraphStateEval(convertPositionEval))
        case .multiply:
            return .node(mathNodeTypeEval(multiplyEval))
        case .divide:
            return .node(mathNodeTypeEval(divideEval))
        // Scroll interaction is a little different because scroll does animation stuff
        case .pressInteraction:
            // DOES NOT USE graph step
            return .graph(pressInteractionEval)
        case .dragInteraction:
            // DOES use GraphStep
            return .graph(dragInteractionEval)
        case .cameraFeed:
            return .graph(cameraFeedEval)
        case .loop:
            return .node(outputsOnlyEval(loopStartEval))
        case .counter:
            return .graphStep(counterEval)
        case .repeatingPulse:
            return .graph(repeatingPulseEval)
        //        case .soundKit:
        //            // technically has no outputs and is side-effect only...
        //            return .computed(soundKitEval)
        case .time:
            return .graphStep(timeEvalWrapper)
        case .deviceTime:
            return .node(deviceTimeEval)
        case .location:
            return .graph(locationEval)
        case .random:
            return .graphStep(randomEval)
        case .hslColor:
            return .node(outputsOnlyEval(hslColorEval))
        case .optionPicker:
            return .node(outputsOnlyEval(optionPickerEval))
        case .pack:
            return .node(outputsOnlyEval(packEval))
        case .unpack:
            return .node(outputsOnlyEval(unpackEval))
        case .or:
            return .node(outputsOnlyEval(orEval))
        case .and:
            return .node(outputsOnlyEval(andEval))
        case .restartPrototype:
            return .graphStep(restartPrototypeEval)
        case .flipSwitch:
            return .graphStep(switchEval)
        case .optionSwitch:
            return .graphStep(optionSwitchEval)
        case .pulseOnChange:
            return .graphStep(pulseOnChangeEval)
        case .pulse:
            return .graphStep(pulseNodeEval)
        case .springAnimation:
            return .graphStep(springAnimationEval)
        case .popAnimation:
            return .graphStep(popAnimationEval)
        case .bouncyConverter:
            return .node(outputsOnlyEval(bouncyConverterEval))
        case .classicAnimation:
            return .graphStep(classicAnimationEval)
        case .curve:
            return .node(outputsOnlyEval(curveEval))
        case .cubicBezierAnimation:
            return .graphStep(cubicBezierAnimationEval)
        case .cubicBezierCurve:
            return .node(outputsOnlyEval(cubicBezierCurveEval))
        case .repeatingAnimation:
            return .graphStep(repeatingAnimationEval)
        case .loopBuilder:
            return .graphStep(loopBuilderEval)
        case .loopInsert:
            return .graphStep(loopInsertEval)
        case .delay:
            return .node(delayEval)
        case .coreMLClassify:
            return .node(coreMLClassifyEval)
        case .coreMLDetection:
            return .node(coreMLDetectionEval)
        case .not:
            return .node(outputsOnlyEval(notEval))
        case .transition:
            return .node(outputsOnlyEval(transitionEval))
        case .scrollInteraction:
            return .graph(scrollInteractionEval)
        case .sampleAndHold:
            return .graphStep(sampleAndHoldEval)
        case .grayscale:
            return .node(grayscaleEval)
        case .videoImport:
            return .node(videoImportEval)
        case .sampleRange:
            return .graph(sampleRangeEval)
        case .soundImport:
            return .node(soundImportEval)
        case .speaker:
            return .node(speakerEval)
        case .microphone:
            return .node(microphoneEval)
        case .networkRequest:
            return .graphStep(networkRequestEval)
        case .valueForKey:
            return .graphStep(valueForKeyEval)
        case .valueAtIndex:
            return .graphStep((valueAtIndexEval))
        case .loopOverArray:
            return .node(outputsOnlyEval(loopOverArrayEval))
        case .setValueForKey:
            return .node(setValueForKeyEval)
        case .jsonObject:
            return .node(jsonObjectEval)
        case .jsonArray:
            return .node(jsonArrayEval)
        case .arrayAppend:
            return .node(arrayAppendEval)
        case .arrayCount:
            return .node(outputsOnlyEval(arrayCountEval))
        case . arrayJoin:
            return .node(outputsOnlyEval(arrayJoinEval))
        case .arrayReverse:
            return .node(outputsOnlyEval(arrayReverseEval))
        case .arraySort:
            return .node(outputsOnlyEval(arraySortEval))
        case .getKeys:
            return .node(outputsOnlyEval(getKeysEval))
        case .indexOf:
            return .node(outputsOnlyEval(indexOfEval))
        case .subarray:
            return .node(outputsOnlyEval(subarrayEval))
        case . valueAtPath:
            return .graphStep(valueAtPathEval)
        case .deviceMotion:
            return .graph(deviceMotionEval)
        case .deviceInfo:
            return .graph(deviceInfoEval)
        case .velocity:
            return .node(velocityEval)
        case .smoothValue:
            return .graphStep(smoothValueEval)
        case .clip:
            return .node(outputsOnlyEval(clipEval))
        case .max:
            return .node(outputsOnlyEval(maxEval))
        case .mod:
            return .node(outputsOnlyEval(modEval))
        case .round:
            return .node(outputsOnlyEval(roundEval))
        case .absoluteValue:
            return .node(outputsOnlyEval(absoluteValueEval))
        case .progress:
            return .node(outputsOnlyEval(progressEval))
        case .reverseProgress:
            return .node(outputsOnlyEval(reverseProgressEval))
        case .rgba:
            return .node(outputsOnlyEval(rgbaEval))
        case .arcTan2:
            return .node(outputsOnlyEval(arcTan2Eval))
        case .sine:
            return .node(outputsOnlyEval(sineEval))
        case .cosine:
            return .node(outputsOnlyEval(cosineEval))
        case .hapticFeedback:
            return .graphStep(hapticFeedbackEval)
        case .imageToBase64String:
            return .node(imageToBase64StringEval)
        case .base64StringToImage:
            return .node(base64StringToImageEval)
        case .whenPrototypeStarts:
            return .graphStep(whenPrototypeStartsEval)
        case .soulver:
            return .node(outputsOnlyEval(soulverEval))
        case .optionEquals:
            return .node(outputsOnlyEval(optionEqualsEval))
        case .subtract:
            return .node(mathNodeTypeEval(subtractEval))
        case .squareRoot:
            return .node(mathNodeTypeEval(squareRootEval))
        case .length:
            return .node(arithmeticNodeTypeEval(lengthEval))
        case .min:
            return .node(outputsOnlyEval(minEval))
        case .power:
            return .node(mathNodeTypeEval(powerEval))
        case .equals:
            return .node(outputsOnlyEval(equalsEval))
        case .equalsExactly:
            return .node(pureNodeEval(equalsExactlyEval))
        case .greaterThan:
            return .node(pureNodeEval(greaterThanEval))
        case .greaterOrEqual:
            return .node(pureNodeEval(greaterOrEqualEval))
        case .lessThan:
            return .node(pureNodeEval(lessThanEval))
        case .lessThanOrEqual:
            return .node(pureNodeEval(lessThanOrEqualEval))
        case .colorToHSL:
            return .node(outputsOnlyEval(colorToHSLEval))
        case .colorToHex:
            return .node(outputsOnlyEval(colorToHexEval))
        case .colorToRGB:
            return .node(outputsOnlyEval(colorToRGBAEval))
        case .hexColor:
            return .node(outputsOnlyEval(hexEval))
        case .splitText:
            return .node(outputsOnlyEval(splitTextEval))
        case .textEndsWith:
            return .node(outputsOnlyEval(textEndsWithEval))
        case .textLength:
            return .node(outputsOnlyEval(textLengthEval))
        case .textReplace:
            return .node(outputsOnlyEval(textReplaceEval))
        case .textStartsWith:
            return .node(outputsOnlyEval(textStartsWithEval))
        case .trimText:
            return .node(outputsOnlyEval(trimTextEval))
        case .textTransform:
            return .node(outputsOnlyEval(textTransformEval))
        case .dateAndTimeFormatter:
            return .node(outputsOnlyEval(dateAndTimeFormatterEval))
        case .stopwatch:
            return .graphStep(stopwatchEval)
        case .optionSender:
            return .node(outputsOnlyEval(optionSenderEval))
        case .any:
            return .node(outputsOnlyEval(anyEval))
        case .loopCount:
            return .node(outputsOnlyEval(loopCountEval))
        case .loopDedupe:
            return .node(outputsOnlyEval(loopDedupeEval))
        case .loopOptionSwitch:
            return .graphStep(loopOptionSwitchEval)
        case .loopRemove:
            return .graphStep(loopRemoveEval)
        case .loopReverse:
            return .node(outputsOnlyEval(loopReverseEval))
        case .loopShuffle:
            return .graphStep(loopShuffleEval)
        case .loopSum:
            return .node(outputsOnlyEval(loopSumEval))
        case .loopToArray:
            return .node(loopToArrayEval)
        case .runningTotal:
            return .node(outputsOnlyEval(runningTotalEval))
        case .loopFilter:
            return .node(outputsOnlyEval(loopFilterEval))
        case .layerInfo:
            return .graph(layerInfoEval)
        case .triangleShape:
            return .node(outputsOnlyEval(triangleShapeEval))
        case .ovalShape:
            return .node(outputsOnlyEval(ovalShapeEval))
        case .circleShape:
            return .node(outputsOnlyEval(circleShapeEval))
        case .roundedRectangleShape:
            return .node(outputsOnlyEval(roundedRectangleShapeEval))
        case .union:
            return .node(outputsOnlyEval(unionEval))
        case .arRaycasting:
            return .node(arRayCastingEval)
        case .keyboard:
            return .graph(keyboardEval)
        case .jsonToShape:
            return .node(outputsOnlyEval(jsonToShapeEval))
        case .arAnchor:
            return .node(arAnchorEval)
        case .shapeToCommands:
            return .node(outputsOnlyEval(shapeToCommandsEval))
        case .commandsToShape:
            return .node(outputsOnlyEval(commandsToShapeEval))
        case .mouse:
            return .node(mouseEval)
        case .sizePack:
            return .node(outputsOnlyEval(sizePackEval))
        case .sizeUnpack:
            return .node(outputsOnlyEval(sizeUnpackEval))
        case .positionPack:
            return .node(outputsOnlyEval(positionPackEval))
        case .positionUnpack:
            return .node(outputsOnlyEval(positionUnpackEval))
        case .point3DPack:
            return .node(outputsOnlyEval(point3DPackEval))
        case .point3DUnpack:
            return .node(outputsOnlyEval(point3DUnpackEval))
        case .point4DPack:
            return .node(outputsOnlyEval(point4DPackEval))
        case .point4DUnpack:
            return .node(outputsOnlyEval(point4DUnpackEval))
        case .transformPack:
            return .node(outputsOnlyEval(transformPackEval))
        case .transformUnpack:
            return .node(outputsOnlyEval(transformUnpackEval))
        case .closePath:
            return .node(outputsOnlyEval(identityEvaluation))
        case .moveToPack:
            return .node(outputsOnlyEval(moveToPackEval))
        case .lineToPack:
            return .node(outputsOnlyEval(lineToPackEval))
        case .curveToPack:
            return .node(outputsOnlyEval(curveToPackEval))
        case .curveToUnpack:
            return .node(outputsOnlyEval(curveToUnpackEval))
        case .mathExpression:
            return .node(mathExpressionEval)
        case .qrCodeDetection:
            return .node(qrCodeDetectionEval)
        case .delayOne:
            return .node(DelayOneNode.eval)
        case .springFromDurationAndBounce:
            return .node(outputsOnlyEval(springFromDurationAndBounceEval))
        case .springFromResponseAndDampingRatio:
            return .node(outputsOnlyEval(springFromResponseAndDampingRatioEval))
        case .springFromSettlingDurationAndDampingRatio:
            return .node(outputsOnlyEval(springFromSettlingDurationAndDampingRatioEval))
        default:
            return nil
        }
    }
}
